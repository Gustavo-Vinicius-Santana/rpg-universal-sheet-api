<?php

namespace App\Services;

use App\Repositories\UserRepository;
use App\Services\AuthService;

class UserService
{
    private AuthService $authService;
    private UserRepository $repository;

    public function __construct(AuthService $authService, UserRepository $repository)
    {
        $this->authService = $authService;
        $this->repository = $repository;
    }

    /**
     * Gets the authenticated user in Firebase.
     *
     * The user is obtained from the middleware that verifies authentication
     * in Firebase for each protected request.
     *
     * @param Request $request
     * @return \Kreait\Firebase\Contract\User The authenticated user.
     */
    public function index($request)
    {
        // Obtém o usuário Firebase do middleware
        $firebaseUser = $request->attributes->get('firebase_user');

        return $firebaseUser;
    }

    /**
     * Creates a new user in the Firebase Authentication and in the local database.
     *
     * It accepts an associative array of user data with keys 'first_name', 'last_name', 'type_acount',
     * 'email', and 'password'. The 'uid' key is not required as it is generated by Firebase.
     *
     * If the registration in Firebase fails, an error response is returned.
     * If the registration in Firebase is successful, a new user record is created in the local
     * database. If the local database creation fails, an error response is returned.
     * On successful creation in both systems, the newly created user record is returned.
     *
     * @param array $data An associative array containing user information with keys 'first_name',
     *                    'last_name', 'type_acount', 'email', and 'password'.
     * @return array An array containing the result of the registration. The 'success' key will be set
     *               to true on success and false on failure. The 'message' key will contain a success
     *               message on success and an error message on failure. The 'erro' key will contain the
     *               exception message on failure.
     */
    public function create(array $data)
    {
        $name = $data['first_name'];
        $lastName = $data['last_name'];
        $typeAcount = $data['type_acount'];

        $email = $data['email'];
        $password = $data['password'];

        
        $userFirebase = $this->authService->register($email, $password);

        if ($userFirebase['success'] === false) {
            return $userFirebase['erro'];
        }

        $user = $userFirebase['user'];
        $uid = $user->uid;

        $newUser = [
            'uid' => $uid,
            'first_name' => $name,
            'last_name' => $lastName,
            'type_acount' => $typeAcount
        ];

        return $this->repository->create($newUser);
    }

    /**
     * Updates the authenticated Firebase user based on the data received in the request.
     *
     * Only the user's first and last name can be updated.
     *
     * @param String $uid The UID of the user to update.
     * @param array $data An associative array containing user information with keys 'first_name' and 'last_name'.
     * @return array An array containing the result of the update. The 'success' key will be set
     *               to true on success and false on failure. The 'message' key will contain a success
     *               message on success and an error message on failure. The 'error' key will contain the
     *               exception message on failure.
     */
    public function update(String $uid, array $data)
    {
        $updteDataUser = [
            'first_name' => $data['first_name'],
            'last_name' => $data['last_name'],
        ];

        $editUser = $this->repository->update($uid, $updteDataUser);

        if($editUser['success'] === false) {
            return [
                'success' => false,
                'message' => $editUser['message'],
                'erro' => $editUser['erro']
            ];
        }

        return [
            'success' => true,
            'message' => 'Usuário atualizado com sucesso!'];
    }

    /**
     * Deletes a user from the database.
     *
     * This method accepts a user uid, retrieves the associated user record from the database,
     * and deletes the record. If the user record is not found, an error response is returned.
     *
     * @param String $uid The unique identifier associated with the user record to delete.
     * @return array An associative array containing the success status and a message indicating the result of the deletion.
     */
    public function delete(String $user)
    {
        $userDeleting = $this->repository->delete($user);

        if($userDeleting['success'] === false) {
            return [
                'success' => false,
                'message' => $userDeleting['message'],
            ];
        }

        return [
            'success' => true,
            'message' => 'Usuário deletado com sucesso'
        ];
    }
}